{"version":3,"sources":["App.js","index.js"],"names":["cards","R","map","_ref","_ref2","Object","slicedToArray","rank","suit","newDisplay","deck","toConsumableArray","i","length","j","Math","floor","random","_ref3","shuffle","slice","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayed","clicked","previousWasCorrect","score","highScore","click","bind","assertThisInitialized","card","correct","next","concat","max","setState","_this2","_Dimensions$get","Dimensions","get","width","height","marginTotal","spacing","react_default","a","createElement","View","style","backgroundColor","Text","fontSize","textAlign","flexDirection","justifyContent","ScrollView","flex","contentContainerStyle","flexWrap","paddingLeft","Image","key","JSON","stringify","source","uri","marginRight","marginBottom","onClick","Component","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":"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","file":"static/js/main.2411940b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ScrollView, Text, View, Dimensions, Image } from 'react-native';\nimport * as R from 'ramda';\nimport './App.css';\n\nlet ranks = [2, 3, 4, 5, 6, 7, 8, 9, 'jack', 'queen', 'king', 'ace'],\n    suits = ['clubs', 'diamonds', 'hearts', 'spades'],\n    cards = R.xprod(ranks, suits).map(([r, s]) => ({ rank: r, suit: s}))\n\nlet shuffle = () => {\n  let deck = [...cards],\n      i = cards.length\n  \n  while (i > 0) {\n      let j = Math.floor(Math.random() * i)\n      i--\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n  }\n\n  return deck\n}\n\nlet displayedCount = 16,\n    newDisplay = () => shuffle().slice(0, displayedCount)\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      displayed: newDisplay(),\n      clicked: [],\n      previousWasCorrect: null,\n      score: 0,\n      highScore: 0\n    }\n\n    this.click = this.click.bind(this)\n  }\n\n  click(card) {\n    let correct = !R.includes(card, this.state.clicked),\n        next = {\n            previousWasCorrect: correct,\n            clicked: correct ? [...this.state.clicked, card] : [],\n            score: correct ? this.state.score + 1 : 0,\n            displayed: newDisplay()\n          }\n\n    next.highScore = Math.max(next.score, this.state.highScore)\n\n    this.setState(next)\n  }\n\n  render() {\n    let {width, height} = Dimensions.get('window'),\n        cardWidth = width/10,\n        marginTotal = width - cardWidth*8,\n        spacing = Math.floor(marginTotal/9)\n\n    return (\n      <View style={{width, height, backgroundColor: 'skyblue'}}>\n        <View style={{width, height: height * 0.2}}>\n          <Text style={{fontSize: 72, textAlign: 'center'}}>Pick A Card... Any Card...</Text>\n          <View style={{flexDirection: 'row', justifyContent: 'space-around'}}>\n            <Text style={{fontSize: 48}}>Score: {this.state.score}</Text>\n            <Text style={{fontSize: 48}}>High Score: {this.state.highScore}</Text>\n          </View>\n        </View>\n        <ScrollView\n          style={{width, height: height * 0.8, flex: 1}}\n          contentContainerStyle={{flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-around', paddingLeft: spacing}}>\n          {this.state.displayed.map(card =>\n              <Image\n              key={JSON.stringify(card)}\n              source={{uri: `/cards/${card.rank}_of_${card.suit}.png`}}\n              style={{width: width/10, height: (width/10)*(726/500), marginRight: spacing, marginBottom: spacing}}\n              onClick={() => this.click(card)}\n            />)}\n        </ScrollView>\n      </View>\n    )\n  }\n}\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { AppRegistry } from \"react-native\";\nimport App from \"./App\";\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});\n"],"sourceRoot":""}